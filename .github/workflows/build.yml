name: Build, Package, and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. Checkout and Node.js setup
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        timeout-minutes: 5
        with:
          node-version: '20'
          cache: 'yarn'

      # 2. Configure Yarn
      - name: Set Yarn registry and timeout
        run: |
          yarn config set registry https://registry.yarnpkg.com
          yarn config set network-timeout 600000

      # 3. Install prebuilt dependencies (no build tools)
      - name: Install node-pty-prebuilt
        run: yarn add node-pty-prebuilt --ignore-scripts

      # 4. Install other dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-scripts

      # 5. Build project
      - name: Build project
        run: |
          $env:TSC_COMPILE_ON_ERROR = "true"
          $env:SKIP_PREFLIGHT_CHECK = "true"
          yarn build-prod

      # 5.5 Rebuild native dependencies
      - name: Rebuild native dependencies
        run: |
          yarn rebuild-native --target=electron
          yarn electron-builder install-app-deps

      # 6. Package for x64
      - name: Package for x64
        run: |
          yarn dist --x64 --win
          # The GitHub token error is expected and doesn't mean the build failed
          if ($LASTEXITCODE -eq 1) {
            echo "::warning::Electron builder exited with code 1, but this might be just due to missing GitHub token"
            # Continue the workflow - we'll verify if the installer was created in the next step
            exit 0
          }

      # 7. Prepare artifacts
      - name: Prepare release assets
        run: |
          if (!(Test-Path -Path "./bin")) {
            New-Item -ItemType Directory -Force -Path "./bin"
          }
          
          # Create a release tag from package.json version
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "RELEASE_VERSION=$version" >> $env:GITHUB_ENV
          
          # Verify installer files exist and are in the right place
          Write-Host "Checking for installer files in ./dist directory..."
          $installerFiles = Get-ChildItem -Path ./dist -Recurse -Filter "*Setup*.exe"
          
          # Show a list of all files in the dist directory for debugging
          Write-Host "Contents of ./dist directory:"
          Get-ChildItem -Path ./dist -Recurse | ForEach-Object {
            Write-Host " - $($_.FullName) ($($_.Length / 1KB) KB)"
          }
          
          if ($installerFiles.Count -eq 0) {
            Write-Host "No installer files found with *Setup*.exe pattern."
            $unpacked = Get-ChildItem -Path ./dist -Directory -Filter "win-unpacked"
            if ($unpacked.Count -gt 0) {
              Write-Warning "No installer found, but unpacked directory exists. Creating a zip archive."
              Compress-Archive -Path "./dist/win-unpacked/*" -DestinationPath "./dist/Optima-IDE-$version-portable.zip" -Force
              $installerFiles = Get-ChildItem -Path ./dist -Filter "*.zip"
              if ($installerFiles.Count -eq 0) {
                Write-Error "Failed to create zip archive from unpacked directory"
                exit 1
              }
            } else {
              Write-Error "No installer files found in ./dist directory and no unpacked directory found"
              exit 1
            }
          }
          
          Write-Host "Found installer files:"
          $installerFiles | ForEach-Object {
            Write-Host "- $($_.Name) ($($_.Length / 1MB) MB)"
          }
          
          # Copy all files from dist to bin
          Get-ChildItem -Path ./dist | ForEach-Object {
            Copy-Item -Path $_.FullName -Destination ./bin -Recurse -Force
          }

      # 8. Upload build artifact (temporary storage)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: electron-app
          path: bin/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 1. Download the built artifact
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: electron-app
          path: bin/

      # 2. Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release v${{ env.RELEASE_VERSION }}
          body: "Auto-generated release for Electron app"
          files: bin/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
